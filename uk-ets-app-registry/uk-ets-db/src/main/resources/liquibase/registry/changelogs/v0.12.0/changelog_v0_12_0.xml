<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

    <changeSet id="0_12_0_ALTER_ACCOUNT_HOLDER_TYPE" author="mhortis" context="migrate">
        <comment>Change the values of Account Holder type to reflect the rephrasing of the possible values</comment>
        <sql>
            UPDATE account_holder
            SET type = 'ORGANISATION'
            WHERE type = 'LEGAL_ENTITY';
        </sql>
        <sql>
            UPDATE account_holder
            SET type = 'INDIVIDUAL'
            WHERE type = 'NATURAL_PERSON';
        </sql>
    </changeSet>

    <changeSet id="0_12_0_ALTER_ACCOUNT_HOLDER_COMMENT_ON_TYPE_COLUMN" author="mhortis" context="migrate">
        <comment>Change comment on column type of Account Holder</comment>
        <sql>
            COMMENT ON COLUMN "account_holder"."type" IS 'The account holder type: INDIVIDUAL, ORGANISATION, GOVERNMENT';
        </sql>
    </changeSet>

    <changeSet id="0_12_0_RECONCILIATION_TABLE" author="pougouniasn" context="migrate">
        <comment>Introduces the table for ETS reconciliations</comment>
        <sql>
            create sequence reconciliation_seq minvalue 0 maxvalue 999999999999999999 increment by 1 start with 1 cache 1 no cycle;

            create sequence reconciliation_identifier_seq minvalue 0 maxvalue 999999999999999999 increment by 1 start with 10000 cache 1 no cycle;

            create table "reconciliation"
            ("id" bigint,
            "identifier" bigint not null,
            "status" varchar(255) not null,
            "created" timestamp not null,
            "updated" timestamp,
            "data" text not null,
            constraint "pk_reconciliation" primary key("id"));

            comment on table "reconciliation" is 'Represents a reconciliation.';

            comment on column "reconciliation"."id" is 'The primary key.';
            comment on column "reconciliation"."identifier" is 'The unique business identifier.';
            comment on column "reconciliation"."status" is 'The reconciliation status (INITIATED, INCONSISTENT, COMPLETED).';
            comment on column "reconciliation"."created" is 'When this reconciliation was created.';
            comment on column "reconciliation"."updated" is 'When this reconciliation was last updated.';
            comment on column "reconciliation"."data" is 'The data calculated during this reconciliation.';
        </sql>
    </changeSet>

    <changeSet id="0_12_0_RECONCILIATION_FAILED_ENTRY_TABLE" author="pougouniasn" context="migrate">
        <comment>Introduces the table for ETS reconciliation failed entries</comment>
        <sql>
            create sequence reconciliation_failed_entry_seq minvalue 0 maxvalue 999999999999999999 increment by 1 start with 1 cache 1 no cycle;

            create table "reconciliation_failed_entry"
            ("id" bigint,
            "reconciliation_id" bigint not null,
            "account_identifier" bigint not null,
            "unit_type" varchar(50) not null,
            "quantity_registry" bigint not null,
            "quantity_transaction_log" bigint not null,
            constraint "pk_reconciliation_failed_entry" primary key("id"));

            alter table "reconciliation_failed_entry" add constraint "fk_rec_fai_ent_rec" foreign key ("reconciliation_id") references "reconciliation" ("id");

            comment on table "reconciliation_failed_entry" is 'Represents an entry which failed during a reconciliation.';

            comment on column "reconciliation_failed_entry"."id" is 'The primary key.';
            comment on column "reconciliation_failed_entry"."reconciliation_id" is 'Foreign key to the reconciliation table.';
            comment on column "reconciliation_failed_entry"."account_identifier" is 'The account unique business identifier.';
            comment on column "reconciliation_failed_entry"."unit_type" is 'The unit type used for calculating this reconciliation entry (e.g. UK Allowances).';
            comment on column "reconciliation_failed_entry"."quantity_registry" is 'The quantity calculated for this reconciliation entry in the Registry.';
            comment on column "reconciliation_failed_entry"."quantity_transaction_log" is 'The quantity calculated for this reconciliation entry in the Transaction Log.';

            create index "rec_fai_ent_idx1" on "reconciliation_failed_entry" ("reconciliation_id");
        </sql>
    </changeSet>

    <changeSet id="0_12_0_RECONCILIATION_HISTORY" author="pougouniasn" context="migrate">

        <comment>Introduces the table for ETS reconciliation history</comment>
        <sql>
            create sequence reconciliation_history_seq minvalue 0 maxvalue 999999999999999999 increment by 1 start with 1 cache 1 no cycle;

            create table "reconciliation_history"
            ("id" bigint,
            "status" varchar(255) not null,
            "date" timestamp not null,
            "reconciliation_id" bigint not null,

            constraint "pk_reconciliation_history" primary key("id"));

            alter table "reconciliation_history" add constraint "fk_rec_his_rec" foreign key ("reconciliation_id") references "reconciliation" ("id");

            comment on table "reconciliation_history" is 'Stores the various statuses of a reconciliation.';
            comment on column "reconciliation_history"."id" is 'The primary key';
            comment on column "reconciliation_history"."status" is 'The reconciliation status (INITIATED, INCONSISTENT, COMPLETED).';
            comment on column "reconciliation_history"."date" is 'When the status changed.';
            comment on column "reconciliation_history"."reconciliation_id" is 'Foreign key to the reconciliation.';

            create index "rec_his_idx1" on "reconciliation_history" ("reconciliation_id");
        </sql>

    </changeSet>
    <changeSet id="0_12_0_REQUESTED_DOCUMENTS_TABLES" author="ltsallas">
        <sql>
            CREATE TABLE "account_holder_files"
            (
            "id" bigint not null,
            "document_name" varchar(256) not null,
            "account_holder_id" bigint not null
            );

            create unique index "idx_pk_account_holder_files" on "account_holder_files"("id");

            COMMENT ON TABLE "account_holder_files" IS 'Requested documents by the account Holder';
            COMMENT ON COLUMN "account_holder_files"."id" IS 'The primary key always matches the related files table id';
            COMMENT ON COLUMN "account_holder_files"."document_name" IS 'The requested document name';
            COMMENT ON COLUMN "account_holder_files"."account_holder_id" IS 'Foreign key to account holder';


            alter table "account_holder_files" add constraint "fk_achf_files" foreign key ("id")
            references "files" ("id") on delete cascade;

            alter table "account_holder_files" add constraint "fk_ahf_ah" foreign key ("account_holder_id")
            references "account_holder" ("id");


            CREATE TABLE "user_files"
            (
            "id" bigint not null,
            "document_name" varchar(256) not null,
            "user_id" bigint  not null
            );

            create unique index "idx_pk_user_files" on "user_files"("id");

            COMMENT ON TABLE "user_files" IS 'Requested documents by the user';
            COMMENT ON COLUMN "user_files"."id" IS 'The primary key always matches the related files table id';
            COMMENT ON COLUMN "user_files"."document_name" IS 'The requested document name';
            COMMENT ON COLUMN "user_files"."user_id" IS 'Foreign key to user ';


            alter table "user_files" add constraint "fk_userfiles_files" foreign key ("id")
            references "files" ("id") on delete cascade ;

            alter table "user_files" add constraint "fk_userfiles_users" foreign key ("user_id")
            references "users" ("id");


        </sql>
        <rollback>
            DROP TABLE IF EXISTS "account_holder_files" CASCADE;
            DROP TABLE IF EXISTS "user_files" CASCADE;
        </rollback>
    </changeSet>

    <changeSet id="0_12_0_DROP_CONSTRAINT" author="pougouniasn" context="migrate">

        <comment>Removes a constraint</comment>
        <sql>
            alter table "reconciliation" alter column "data" drop not null;
        </sql>

    </changeSet>

    <changeSet id="0_12_0_DOCUMENT_REFERENCE" author="georgopoulosp" context="migrate">

        <comment>Create Document Reference table</comment>
        <sql>
            CREATE TABLE "reference_files"
            (
            "id" bigint not null,
            "document_name" varchar(256) not null,
            "reference_type" varchar(256) NULL
            );

            create unique index "idx_pk_reference_files" on "reference_files"("id");

            COMMENT ON TABLE "reference_files" IS 'Reference documents';
            COMMENT ON COLUMN "reference_files"."id" IS 'The primary key always matches the related files table id';
            COMMENT ON COLUMN "reference_files"."document_name" IS 'The reference document name';
            COMMENT ON COLUMN "reference_files"."reference_type" IS 'The reference document type e.g. TASK';

            alter table "reference_files" add constraint "fk_reference_files" foreign key ("id")
            references "files" ("id") on delete cascade;

        </sql>
        <rollback>
            DROP TABLE IF EXISTS "reference_files" CASCADE;
        </rollback>
    </changeSet>

    <changeSet id="0_12_0_INSERT_DOCUMENT_TEMPLATE" author="georgopoulosp" context="migrate">

        <comment>Insert sample documents template</comment>
        <sql>
            insert into files values
            (nextval('files_seq'), null,'Sample_data_1.docx',decode('', 'base64'),
            'SUBMITTED',CURRENT_TIMESTAMP,'1 kB');

            insert into reference_files values
            (currval('files_seq'), 'Sample_data_1.docx', 'TASK_TEMPLATE_FILE');

            insert into files values
            (nextval('files_seq'), null,'Sample_data_2.docx',decode('', 'base64'),
            'SUBMITTED',CURRENT_TIMESTAMP,'1 kB');

            insert into reference_files values
            (currval('files_seq'), 'Sample_data_2.docx', 'TASK_TEMPLATE_FILE');
        </sql>
    </changeSet>

</databaseChangeLog>
